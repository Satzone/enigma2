#!/bin/sh

prefix=@prefix@
exec_prefix=@exec_prefix@
datarootdir=@datarootdir@

#wetek kodi start
if [ -e /usr/bin/kodi ]; then
	if [ -e /etc/.kodistart ]; then
		rm -f /etc/.kodistart
		echo 0 >  /sys/class/video/disable_video
		/usr/bin/kodi
		echo 1 > /sys/class/graphics/fb0/blank
		if grep -q 1080 /etc/enigma2/settings; then
			echo "0 0 1919 1079" > /sys/class/video/axis
			echo 1080p50Hz > /sys/class/display/mode
		else
			echo "0 0 1279 719" > /sys/class/video/axis
			echo 720p50Hz > /sys/class/display/mode
		fi
		echo 0 >  /sys/class/video/disable_video
		echo 0 > /sys/class/graphics/fb0/blank
	fi
fi

#check for /etc/enigma2 folder
if [ ! -d /etc/enigma2 ] ; then
	mkdir -p /etc/enigma2
fi

# workaround for corrupt ssl files
if [ "$(grep -i config.misc.firstrun=true /etc/enigma2/settings)" != "" ]; then
	rm -rf /etc/enigma2/cert.pem &
	rm -rf /etc/enigma2/key.pem &
fi

if [ -e /proc/stb/info/boxtype ]; then
	stbcheck=`cat /proc/stb/info/boxtype`
	if [ $stbcheck == "sf8008" ] || [ $stbcheck == "sf8008m" ] || [ $stbcheck == "sf8008opt" ] || [ $stbcheck == "sx988" ] || [ $stbcheck == "ustym4kpro" ] || [ $stbcheck == "ustym4kottpremium" ] || [ $stbcheck == "cc1" ] || [ $stbcheck == "trio4k" ] || [ $stbcheck == "gbip4k" ] || [ $stbcheck == "gbmv200" ] || [ $stbcheck == "beyonwizv2" ] || [ $stbcheck == "viper4k" ] || [ $stbcheck == "og2ott4k" ] || [ $stbcheck == "sfx6008" ]; then
		count=`ps -ef |grep libreader |grep -v "grep" |wc -l`
		if [ 0 == $count ];then
			libreader 720P_50
		fi
	fi
fi
# Show backdrop on enigma2 start.
if [ -x "@bindir@/showiframe" ]; then
	if [ -e /proc/stb/info/boxtype ]; then
		stbcheck=`cat /proc/stb/info/boxtype | cut -c1-2`
		if [ ! $stbcheck == "u5" ] && [ ! $stbcheck == "u4" ]; then
			killall -9 showiframe; sleep 1
		fi
	else
		killall -9 showiframe; sleep 1
	fi
	SKIN=`sed -En 's|^config\.skin\.primary_skin=(.+)/skin\.xml$|\1|p' "@sysconfdir@/enigma2/settings"`
	if [ -n "${SKIN}" ]; then
		SEARCHDIRS="@sysconfdir@/enigma2/$SKIN @sysconfdir@/enigma2/skin_common @sysconfdir@/enigma2 @datadir@/enigma2/$SKIN @datadir@/enigma2/skin_default @datadir@/enigma2 @datadir@"
	else
		SEARCHDIRS="@sysconfdir@/enigma2/skin_common @sysconfdir@/enigma2 @datadir@/enigma2/skin_default @datadir@/enigma2 @datadir@"
	fi
	for DIR in $SEARCHDIRS; do
		if [ -d "${DIR}" ] && [ -f "${DIR}/backdrop.mvi" ]; then
			"@bindir@/showiframe" "${DIR}/backdrop.mvi"
			break
		fi
	done
fi

# hook to execute scripts always before enigma2 start
if [ -x @bindir@/enigma2_pre_start.sh ]; then
	@bindir@/enigma2_pre_start.sh
fi

if [ -e /proc/stb/info/hwmodel ]; then
   stbcheck=`cat /proc/stb/info/hwmodel | cut -c1-8`
   if [ $stbcheck == "optimuss" ]; then
      string=`mount | grep 'sda1' | cut -d " " -f3`
      if [ -e $string/sat-soft/settings.sh ]; then
         chmod 755 $string/sat-soft/settings.sh
         $string/sat-soft/settings.sh
      fi
   fi
fi

if [ -d /home/root ]; then
	cd /home/root
	export HOME=/home/root
fi

# any debuglevel passed?
if [ -z $ENIGMA_DEBUG_LVL ]; then
	DEBUG_LVL=3
else
	DEBUG_LVL=$ENIGMA_DEBUG_LVL
fi

#check for sundtek tuner helper lib
if [ -e /opt/lib/libmediaclient.so ]; then
	LIBS="/opt/lib/libmediaclient.so @libdir@/libopen.so.0.0.0"
else
	LIBS="@libdir@/libopen.so.0.0.0"
fi

#check for specific pagecache helper lib
if [ -e @libdir@/libpagecache.so ]; then
	LIBS="$LIBS @libdir@/libpagecache.so"
fi

#check for receiver specific passthrough helper lib
#if [ -e @libdir@/libpassthrough.so ]; then
#	LIBS="$LIBS @libdir@/libpassthrough.so"
#fi

if [ ! -e /etc/enigma2/settings ]; then
	touch /etc/enigma2/settings
fi

#check for default sat settings
stbcheck=00
if [ -e /proc/stb/info/subtype ]; then
   stbcheck=`cat /proc/stb/info/subtype`
fi
if [ -e /proc/stb/info/boxtype ] && [ -e /proc/stb/info/chipset ]; then
   boxtype=`cat /proc/stb/info/boxtype`
   chipset=`cat /proc/stb/info/chipset`
   if  [ $boxtype == "et7000" ] && [ $chipset == "bcm73625" ]; then
       stbcheck=01
   fi
fi

sync

# in case sysctl.conf is not properly loaded - load sysctl.conf here again...
sysctl -p

(sleep 2; echo "enigma2 is the main pvr application... adjust oom score!"; PID=$(pidof enigma2); \
        [ -e /proc/$PID/oom_score_adj ] && echo "-999" > /proc/$PID/oom_score_adj || echo "-17" > /proc/$PID/oom_adj;) &

export LC_CTYPE="en_US.UTF-8"

# Randomize timestamp if clock is not set
RANDOMIZE1970=''
time=`date +%Y` ;
if [ "$time" = 1970 ]; then
	RANDOMIZE1970="$(strings /dev/urandom | grep -o '[[:alnum:]]' | head -n 5 | tr -d '\n')"
fi

# Set time format used to prefix each line in the debug logs.
DEBUGTIME=`sed -En 's|^config\.crash\.debugTimeFormat=(.+)$|\1|p' "@sysconfdir@/enigma2/settings"`
[ -n "${DEBUGTIME}" ] || DEBUGTIME="2"
DEBUG_TIME="${DEBUGTIME}"

# Create and set log folder
LOGFOLDER="/home/root/logs/"
if [ ! -d $LOGFOLDER ] ; then mkdir -p $LOGFOLDER; fi
if [ "$(grep config.crash.debug_path= /etc/enigma2/settings | sed 's/config.crash.debug_path=//g')" != "" -a -d "$(grep config.crash.debug_path= /etc/enigma2/settings | sed 's/config.crash.debug_path=//g')" ]; then
	LOGFOLDER=$(grep config.crash.debug_path= /etc/enigma2/settings | sed 's/config.crash.debug_path=//g')
fi

# Enable and configure gstreamer debug log of category and level without color
if [ "$(grep -i config.crash.gstdebug=true /etc/enigma2/settings)" != "" ]; then
	GSTDEBUGCATEGORY="*"
	GSTDEBUGLEVEL="INFO"
	if [ "$(grep config.crash.gstdebugcategory= /etc/enigma2/settings | sed 's/config.crash.gstdebugcategory=//g')" != "" ]; then
		GSTDEBUGCATEGORY=$(grep config.crash.gstdebugcategory= /etc/enigma2/settings | sed 's/config.crash.gstdebugcategory=//g')
	fi
	if [ "$(grep config.crash.gstdebuglevel= /etc/enigma2/settings | sed 's/config.crash.gstdebuglevel=//g')" != "" ]; then
		GSTDEBUGLEVEL=$(grep config.crash.gstdebuglevel= /etc/enigma2/settings | sed 's/config.crash.gstdebuglevel=//g')
	fi
	export GST_DEBUG_FILE="${LOGFOLDER}GStreamer-debug-$(date +%Y%m%d_%H-%M-%S)${RANDOMIZE1970}.log"
	export GST_DEBUG="${GSTDEBUGCATEGORY}:${GSTDEBUGLEVEL}"
	export GST_DEBUG_NO_COLOR="1"
fi

# Enable and set gstreamer directory for pipeline graphs that are not created if directory is not set
if [ "$(grep -i config.crash.gstdot=true /etc/enigma2/settings)" != "" ]; then
	export GST_DEBUG_DUMP_DOT_DIR=${LOGFOLDER}
fi

# Start enigma2 with or without debug
if [ "$(grep -i config.crash.enabledebug=true /etc/enigma2/settings)" != "" ]; then
	DEBUG_LVL='4'
	LD_PRELOAD=$LIBS ENIGMA_DEBUG_LVL=$DEBUG_LVL ENIGMA_DEBUG_TIME="${DEBUG_TIME}" @bindir@/enigma2 &> ${LOGFOLDER}Enigma2-debug-$(date +%Y%m%d_%H-%M-%S)${RANDOMIZE1970}.log
else
	LD_PRELOAD=$LIBS ENIGMA_DEBUG_LVL=$DEBUG_LVL ENIGMA_DEBUG_TIME="${DEBUG_TIME}" @bindir@/enigma2
fi

# enigma2 exit codes:
#
# 1 - halt
# 2 - reboot
# 3 - restart enigma
#
# >128 signal

ret=$?

function check_busybox_update {
	if [ -e /etc/enigma2/.busybox_update_required ]; then
		rm /etc/enigma2/.busybox_update_required
		opkg install busybox --force-reinstall
	fi
} 

if [ "$ret" -ne "1" ]; then
	if [ -e /proc/stb/info/boxtype ]; then
		stbcheck=`cat /proc/stb/info/boxtype | cut -c1-2`
		if [ $stbcheck == "u5" ] || [ $stbcheck == "u4" ]; then
			killall -9 showiframe; sleep 5
		fi
		stbcheck=`cat /proc/stb/info/boxtype`
		if [ $stbcheck == "sf8008" ] || [ $stbcheck == "sf8008m" ] || [ $stbcheck == "sf8008opt" ] || [ $stbcheck == "sx988" ] || [ $stbcheck == "ustym4kpro" ] || [ $stbcheck == "ustym4kottpremium" ] || [ $stbcheck == "cc1" ] || [ $stbcheck == "trio4k" ] || [ $stbcheck == "gbip4k" ] || [ $stbcheck == "gbmv200" ] || [ $stbcheck == "beyonwizv2" ] || [ $stbcheck == "viper4k" ] || [ $stbcheck == "og2ott4k" ] || [ $stbcheck == "sfx6008" ]; then
			killall -9 libreader; sleep 5
		fi
	fi
fi

case $ret in
	1)
		check_busybox_update
		touch /etc/enigma2/.deep
		/sbin/halt
		;;
	2)
		check_busybox_update
		if [ -f /proc/stb/fp/force_restart ]; then
			echo 1 > /proc/stb/fp/force_restart
		fi
		[[ -e /etc/enigma2/.deep ]] && rm /etc/enigma2/.deep
		/sbin/reboot
		;;
	3)
		rm -fR /home/root/.gstreamer-0.10
		rm -f /tmp/.listen.camd.socket.ignore
		;;
	4)
		check_busybox_update
		/sbin/rmmod lcd
		/usr/sbin/fpupgrade --upgrade 2>&1 | tee /home/root/fpupgrade.log
		sleep 1;
		/sbin/rmmod fp
		/sbin/modprobe fp
		[[ -e /etc/enigma2/.deep ]] && rm /etc/enigma2/.deep
		/sbin/reboot
		;;
	16)
		if [ -e /dev/block/by-name/flag ]; then
			echo -n "0" > /dev/block/by-name/flag
		elif [ -e /dev/block/by-name/bootoptions ]; then
			mkdir -p /tmp/bootoptions
			mount /dev/block/by-name/bootoptions /tmp/bootoptions
			cp -f /tmp/bootoptions/STARTUP_RECOVERY /tmp/bootoptions/STARTUP_ONCE
		else
			echo "rescue" > /proc/stb/fp/boot_mode
		fi
		[[ -e /etc/enigma2/.deep ]] && rm /etc/enigma2/.deep
		/sbin/reboot
		;;
	43)
		init 1
		;;
	44)
		# little hack but it will be fixed soon in drivers
		@libdir@/enigma2/python/Plugins/SystemPlugins/MICOMUpgrade/bin/fbclear
		/usr/bin/showiframe @libdir@/enigma2/python/Plugins/SystemPlugins/MICOMUpgrade/wait.mvi
		echo fpupload >/proc/vfd && sleep 3 && dd bs=256k if=/tmp/micom.bin of=/dev/mcu
		/usr/bin/showiframe @libdir@/enigma2/python/Plugins/SystemPlugins/MICOMUpgrade/reboot.mvi
		[[ -e /etc/enigma2/.deep ]] && rm /etc/enigma2/.deep
		# Wait forever for the user to power off
		while(true) ; do sleep 60 ; done
		;;
	45)
		echo "    " > /dev/lcd0
		/usr/bin/gigablue_wol
		;;
	*)
		rm -f /tmp/.listen.camd.socket.ignore
		;;
esac

fi

if [ -d /home/root ]; then
	export HOME=/home/root
	cd
fi

# Pre-load libopen, which will set the Close-on-Exec flag for all opened
# file units so that they don't leak into sub-processes.
#
#check for sundtek tuner helper lib
if [ -e /opt/lib/libmediaclient.so ]; then
	LIBS="/opt/lib/libmediaclient.so /usr/lib/libopen.so.0.0.0"
else
	LIBS="/usr/lib/libopen.so.0.0.0"
fi

sync

(sleep 2; echo "enigma2 is the main pvr application... adjust oom score!"; PID=$(pidof enigma2); \
	[ -e /proc/$PID/oom_score_adj ] && echo "-999" > /proc/$PID/oom_score_adj || echo "-17" > /proc/$PID/oom_adj;) &

export LC_CTYPE="en_US.UTF-8"

# set time format used to prefix each line in the debug logs
#
if grep -q 'config\.crash\.logtimeformat' @sysconfdir@/enigma2/settings; then
	export ENIGMA_DEBUG_TIME=`grep "config\.crash\.logtimeformat" @sysconfdir@/enigma2/settings | sed -E "s/^.*=(.*)$/\1/" -`
fi

# If we are running with a log then we need to set up a sub-process to
# do this so that it can open a new log if the current one's size
# becomes too large.
# So, we define various functions for use
#
if grep -q 'config\.crash\.enabledebug=True' @sysconfdir@/enigma2/settings; then
	DEBUG_LVL='4'

# Generate a random message for the logger to know that enigma2 has
# ended
#
    unem="Enigma2 is LEAVING: $RANDOM"

# ========== Start of log functions ==========
# fixup_log() - remove any partial-line at the end a logfile as we
# switch and add a note there instead.
#
    fixup_log() {
        old="$1"
        new="$2"

# Remove the fsize limit, so we can add the continuation tag.
# We're in a subprocess and exit when done, so this won't affect
# restricting the active log file
#
        ulimit -S -f unlimited

# An in-line python script...
        python - "$old" "$new" <<EOP
import sys, os

ofile = sys.argv[1]
nfile = sys.argv[2]
size = os.stat(ofile).st_size
pos = size - (size % 1024)

# We partition the file into 1024-byte blocks (plus the probably
# incomplete one at the end), read them in reverse order and
# look for the last newline character in each block.
# As soon as we've found one we've found the last newline in the file.
# Anything beyond that is an incomplete line which took us to the
# file-size limit, so we truncate there and add the new log location.
# The complete text of any such incomplete ending line will be written
# at the start of the next log, after the note of the preceding log.
#
with open(ofile, "r+b") as f:
    while pos >= 0:
        f.seek(pos)
        buf = f.read(1024)
        where = buf.rfind("\n")
        if where < 0:
            pos -= 1024
            continue
# OK, we've found the last newline
# seek there and truncate
#
        f.seek(pos + where + 1)
        f.truncate()
# Now add the note as to where future logging has gone
#
        f.write("Continued in %s\n" % nfile)
        break
EOP
    }

# new_log() - open a new log and, if this is a restart, note the
# next/prev logs pathnames at the end/start of the relevant logs
#
    new_log() {
        if [ -n "$logname" ]; then
            prev=$logname
        else
            prev=
        fi
        logname="${debug_dir}/Enigma2_debug_`date +%Y-%m-%d_%H-%M-%S`.log"
        exec > $logname 2>&1    # Open the new one
# If we have opened a new one then we wish to record what the previous
# one was and also to remove any partial-line at the end of the old log
# and note the new logname there instead.
# We do this in the background so that we can get on with logging.
#
        if [ -n "$prev" ]; then
            fixup_log "$prev" "$logname"&
            echo "Continued from $prev"
            logswitched=0
        else
            logswitched=1
        fi
    }

# Set a new file-size limit
# We MUST ensure that this is ONLY set for the dblogger - NOT enigma2!!!
# ulimit uses 1024-byte units, so we must multiply the configured limit
# (in MB) by 1024
#
    new_limit() {
        lim=$(($1 * 1024))
        ulimit -S -f $lim
    }

# dblogger - the main function. This receives the log text on
# stdout
#
    dblogger() {

# We want the logger to ignore TERM, so that if a reboot command is run
# from the command line this doesn't get booted out before enigma2
# closes down.
# We'll exit when enigma2 does anyway (the "read line" will fail).
#
        trap "" SIGTERM

        logname=
        lim=
        logswitched=0
        debug_dir="/home/root/logs"

# We look for config.crash.debugloglimit in settings
# (default == 4, see Screens/LogManager.py) and use it:
#
        debugloglimit=`awk -F= '
 BEGIN{res=4};
 $1 == "config.crash.debugloglimit" {res=$2; exit};
 END{print res}' @sysconfdir@/enigma2/settings`

        new_limit $debugloglimit

# We look for config.crash.debugloglimit in settings
# (default == /home/root/logs/, see Screens/LogManager.py) and use it:
#
        raw=`awk -F= '
 BEGIN{res="/home/root/logs/"};
 $1 == "config.crash.debug_path" {res=$2; exit};
 END{print res}' /etc/enigma2/settings`
        debug_dir=${raw%/}      # Strip trailing / if there.
        trap new_log SIGXFSZ    # Re-opener
        new_log                 # First opener

# The values will be reported at start-up, but we've already read and
# handled them above, so set flags to ignore them the first time.
#
        first_limit=1   # Not yet seen
        first_lpath=1   # Not yet seen

        echo "========== Enigma2 log starts =========="
        while read -r line; do      # -r == no slash-escaping of input
            case "$line" in
# Are we being told that enigma2 has exited?
# If so, we exit too
#
            $unem)
                echo "enigma2 has exited"
                break
                ;;
# Have we been asked to change the limit or log path?
# If so, activate the change.
# We'll log the CHANGE line as well....
#
            CHANGE\ config.crash.debugloglimit=*)
                if [ $first_limit -eq 1 ]; then
                    first_limit=0
                else
                    debugloglimit=`echo $line |
                         sed -e's/^.*config.crash.debugloglimit=//'`
                    new_limit $debugloglimit
                fi
                ;;
            CHANGE\ config.crash.debug_path=*)
                if [ $first_lpath -eq 1 ]; then
                    first_lpath=0
                else
                    raw=`echo $line |
                         sed -e's/^.*config.crash.debug_path=//'`
                    debug_dir=${raw%/}      # Strip trailing / if there.
                    new_log
# new_log() will set logswitched, but we don't want to rewrite this line
# for this case, so unset it
#
                    logswitched=0
                fi
                ;;
            esac
            echo "$line"
            if [ $logswitched -eq 1 ]; then # New log opened
                echo "$line"                # Write full line into new log
                logswitched=0
            fi
        done

# enigma2 has left.
# As we leave, lift the limit (so we don't potentially create a
# new log just to record the closing) and record this.
#
        ulimit -S -f unlimited
        echo "========== Enigma2 log ends =========="
    }
# ========== End of log functions ==========

# Run into a logging function in such a way that when
# enigma2 exits the logger exits too.
# We need to get the exit code from enigma2, not the logger
#
        ( LD_PRELOAD=$LIBS @bindir@/enigma2 # run enigma2
            xstat=$?                        # its exit code
            echo                            # in case of mid-line crisis
            echo $unem                      # marker to end logger
            exit $xstat                     # exit code for this "block"
        ) 2>&1 | dblogger
	ret=${PIPESTATUS[0]}    # enigma2 exit code, not dblogger's
else
	# if debug logs are disabled
	if grep -q 'config\.misc\.firstrun=False' @sysconfdir@/enigma2/settings; then
		# Write unwanted output to /dev/null. Do not write output to the serial port or the receiver will run slow.
		LD_PRELOAD=$LIBS @bindir@/enigma2 &> /dev/null
	else
		# on first run only, write the output to the serial port
		LD_PRELOAD=$LIBS @bindir@/enigma2
	fi
	ret=$?
fi

# enigma2 exit codes:
#
# 1 - halt
# 2 - reboot
# 3 - restart enigma
#
# >128 signal


if [ "$ret" -ne "1" ]; then
	if [ -e /proc/stb/info/boxtype ]; then
		stbcheck=`cat /proc/stb/info/boxtype`
		if [ $stbcheck == "viper4k" ] || [ $stbcheck == "sf8008" ] || [ $stbcheck == "sf8008m" ] || [ $stbcheck == "sx988" ] || [ $stbcheck == "beyonwizv2" ] || [ $stbcheck == "gbmv200" ] ; then
			killall -9 libreader; sleep 5
		fi
	fi
fi

# hook to execute user standby script before enigma2 exits
if [ -x @sysconfdir@/enigma2/standby.sh ]; then
	/etc/enigma2/standby.sh
fi

case $ret in
	1)
		/sbin/halt
		;;
	2)
		/sbin/reboot
		;;
	3)
		rm -f /tmp/.listen.camd.socket.ignore
		;;
	4)
		/sbin/rmmod lcd
		/usr/sbin/fpupgrade --upgrade 2>&1 | tee /home/root/fpupgrade.log
		sleep 1;
		/sbin/rmmod fp
		/sbin/modprobe fp
		/sbin/reboot
		;;
	16)
		if [ -e /dev/block/by-name/flag ]; then
			echo -n "0" > /dev/block/by-name/flag
		elif [ -e /dev/block/by-name/bootoptions ]; then
			mkdir -p /tmp/bootoptions
			mount /dev/block/by-name/bootoptions /tmp/bootoptions
			cp -f /tmp/bootoptions/STARTUP_RECOVERY /tmp/bootoptions/STARTUP_ONCE
		else
			echo "rescue" > /proc/stb/fp/boot_mode
		fi
		[[ -e /etc/enigma2/.deep ]] && rm /etc/enigma2/.deep
		/sbin/reboot
		;;
	42)
		python @prefix@/lib/enigma2/python/upgrade.pyc
		;;
	43)
		init 1
		;;
	44)
		# little hack but it will be fixed soon in drivers
		/usr/lib/enigma2/python/Plugins/SystemPlugins/MICOMUpgrade/bin/fbclear
		@bindir@/showiframe /usr/lib/enigma2/python/Plugins/SystemPlugins/MICOMUpgrade/wait.mvi
		echo fpupload >/proc/vfd && sleep 3 && dd bs=256k if=/tmp/micom.bin of=/dev/mcu
		@bindir@/showiframe /usr/lib/enigma2/python/Plugins/SystemPlugins/MICOMUpgrade/reboot.mvi
		# Wait forever for the user to power off
		while(true) ; do sleep 60 ; done
		;;
	*)
		rm -f /tmp/.listen.camd.socket.ignore
		;;
esac
